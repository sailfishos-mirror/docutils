#! /usr/bin/env python3
# $Id$
# Author: Günter Milde
# Maintainer: docutils-develop@lists.sourceforge.net
# :Copyright: 2024 Günter Milde,
# :License: Released under the terms of the `2-Clause BSD license`_, in short:
#
#    Copying and distribution of this file, with or without modification,
#    are permitted in any medium without royalty provided the copyright
#    notice and this notice are preserved.
#    This file is offered as-is, without any warranty.
#
# .. _2-Clause BSD license: https://opensource.org/licenses/BSD-2-Clause

"""
Test `core.publish_parts()`__ with the LaTeX writer.

__ https://docutils.sourceforge.io/docs/api/publisher.html#publish-parts
"""

from pathlib import Path
import sys
import unittest


if __name__ == '__main__':
    # prepend the "docutils root" to the Python library path
    # so we import the local `docutils` package.
    sys.path.insert(0, str(Path(__file__).resolve().parents[2]))

import docutils
from docutils.core import publish_parts
from docutils.writers import latex2e


class LaTeXWriterPublishPartsTestCase(unittest.TestCase):
    """Test LaTeX writer `publish_parts()` interface."""

    maxDiff = None
    settings = {'_disable_config': True,
                'strict_visitor': True,
                # avoid latex writer future warnings:
                'use_latex_citations': False,
                'legacy_column_widths': True,
                }

    def test_publish_parts(self):
        for name, (settings_overrides, cases) in samples.items():
            for casenum, (case_input, expected_parts) in enumerate(cases):
                parts = publish_parts(
                    source=case_input,
                    writer=latex2e.Writer(),
                    settings_overrides=self.settings|settings_overrides,
                    )
                expected = default_parts | expected_parts
                expected['whole'] = expected['whole'].format(**expected)

                for key in parts.keys():
                    with self.subTest(id=f'samples[{name!r}][{casenum}][{key}]'):
                        self.assertEqual(f'{expected[key]}', f'{parts[key]}')


default_parts = {
    'abstract': '',
    'body': '',
    'body_pre_docinfo': '',
    'dedication': '',
    'docinfo': '',
    'encoding': 'utf-8',
    'errors': 'strict',
    'fallbacks': '',
    'head_prefix': '\\documentclass[a4paper]{article}\n',
    'latex_preamble': '% PDF Standard Fonts\n'
                      '\\usepackage{mathptmx} % Times\n'
                      '\\usepackage[scaled=.90]{helvet}\n'
                      '\\usepackage{courier}\n',
    'pdfsetup': '% hyperlinks:\n'
                '\\ifdefined\\hypersetup\n'
                '\\else\n'
                '  \\usepackage[colorlinks=true,linkcolor=blue,urlcolor=blue]{hyperref}\n'
                '  \\usepackage{bookmark}\n'
                '  \\urlstyle{same} % normal text font (alternatives: tt, rm, sf)\n'
                '\\fi\n',
    'requirements': '\\usepackage[T1]{fontenc}\n',
    'stylesheet': '',
    'subtitle': '',
    'title': '',
    'titledata': '',
    'version': f'{docutils.__version__}',
    'whole': '{head_prefix}'
             '% generated by Docutils <https://docutils.sourceforge.io/>\n'
             '\\usepackage{{cmap}} % fix search and cut-and-paste in Acrobat\n'
             '{requirements}\n'
             '%%% Custom LaTeX preamble\n'
             '{latex_preamble}\n'
             '%%% User specified packages and stylesheets\n'
             '{stylesheet}\n'
             '%%% Fallback definitions for Docutils-specific commands\n'
             '{fallbacks}\n'
             '{pdfsetup}\n'
             '%%% Body\n'
             '\\begin{{document}}\n'
             '{body}\n'
             '\\end{{document}}\n'
             }

samples = {}

samples['default'] = ({}, [
['',  # empty input string
 {}   # results in default parts
 ],
])


if __name__ == '__main__':
    unittest.main()
